// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  cases         TransferCase[]
  comments      Comment[]
  uploads       Upload[]
}

model School {
  id            String    @id @default(cuid())
  name          String
  code          String    @unique
  country       String
  state         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  coursesFrom   Course[]  @relation("FromSchool")
  coursesTo     Course[]  @relation("ToSchool")
  casesFrom     TransferCase[] @relation("FromSchool")
  casesTo       TransferCase[] @relation("ToSchool")
}

model Course {
  id            String    @id @default(cuid())
  code          String
  name          String
  credits       Float
  description   String?
  schoolId      String
  school        School    @relation("FromSchool", fields: [schoolId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  transfersFrom TransferMapping[] @relation("FromCourse")
  transfersTo   TransferMapping[] @relation("ToCourse")
  
  @@unique([schoolId, code])
}

model TransferMapping {
  id            String    @id @default(cuid())
  fromCourseId  String
  toCourseId    String
  status        TransferStatus @default(PENDING)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  fromCourse    Course    @relation("FromCourse", fields: [fromCourseId], references: [id])
  toCourse      Course    @relation("ToCourse", fields: [toCourseId], references: [id])
  cases         TransferCase[]
}

model TransferCase {
  id            String    @id @default(cuid())
  title         String
  description   String
  fromSchoolId  String
  toSchoolId    String
  mappingId     String?
  userId        String
  status        CaseStatus @default(OPEN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  fromSchool    School    @relation("FromSchool", fields: [fromSchoolId], references: [id])
  toSchool      School    @relation("ToSchool", fields: [toSchoolId], references: [id])
  mapping       TransferMapping? @relation(fields: [mappingId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  comments      Comment[]
  uploads       Upload[]
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  caseId        String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  case          TransferCase @relation(fields: [caseId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Upload {
  id            String    @id @default(cuid())
  fileName      String
  fileUrl       String
  fileType      String
  caseId        String
  userId        String
  createdAt     DateTime  @default(now())
  
  case          TransferCase @relation(fields: [caseId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

enum TransferStatus {
  APPROVED
  PENDING
  REJECTED
  CONDITIONAL
}

enum CaseStatus {
  OPEN
  RESOLVED
  CLOSED
} 