generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SchoolType {
  COMMUNITY_COLLEGE
  UNIVERSITY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  college       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  contributions TransferMapping[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id           String            @id @default(cuid())
  code         String            @unique
  name         String
  type         SchoolType        @default(COMMUNITY_COLLEGE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  courses      Course[]
  fromMappings TransferMapping[] @relation("FromSchool")
  toMappings   TransferMapping[] @relation("ToSchool")
}

model Course {
  id           String            @id @default(cuid())
  code         String
  name         String
  credits      Float
  description  String?
  schoolId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  school       School            @relation(fields: [schoolId], references: [id])
  fromMappings TransferMapping[] @relation("FromCourse")
  toMappings   TransferMapping[] @relation("ToCourse")

  @@unique([code, schoolId])
}

model TransferMapping {
  id           String         @id @default(cuid())
  fromSchoolId String
  toSchoolId   String
  fromCourseId String
  toCourseId   String
  status       TransferStatus @default(PENDING)
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fromSchool   School         @relation("FromSchool", fields: [fromSchoolId], references: [id])
  toSchool     School         @relation("ToSchool", fields: [toSchoolId], references: [id])
  fromCourse   Course         @relation("FromCourse", fields: [fromCourseId], references: [id])
  toCourse     Course         @relation("ToCourse", fields: [toCourseId], references: [id])
  contributor  User?          @relation(fields: [contributorId], references: [id])
  contributorId String?

  @@unique([fromCourseId, toCourseId])
}
